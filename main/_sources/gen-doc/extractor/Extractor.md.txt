# Class: Extractor


_A script, code, or web service that, when executed, can extract information from a supplied "file" with a specific [`FileType`](FileType.md). The supplied "file" may also be a set of files with a given structure. The extracted information may be verbatim or transformed, and include the scientific data and/or metadata contained within the file._





URI: [extractor:Extractor](extractor:Extractor)




```{mermaid}
 classDiagram
    class Extractor
      Extractor : citations
        
          Extractor --|> Citation : citations
        
      Extractor : description
        
      Extractor : documentation
        
      Extractor : id
        
      Extractor : installation
        
          Extractor --|> Installation : installation
        
      Extractor : instructions
        
      Extractor : license
        
          Extractor --|> License : license
        
      Extractor : name
        
      Extractor : source_repository
        
      Extractor : subject
        
      Extractor : supported_filetypes
        
          Extractor --|> SupportedFileTypes : supported_filetypes
        
      Extractor : supported_output_filetypes
        
          Extractor --|> SupportedFileTypes : supported_output_filetypes
        
      Extractor : usage
        
          Extractor --|> Usage : usage
        
      
```




<!-- no inheritance hierarchy -->


## Slots

| Name | Cardinality and Range | Description | Inheritance |
| ---  | --- | --- | --- |
| [id](id.md) | 1..1 <br/> [String](String.md) | A unique identifier for the entry within the MaRDA registry namespace, this<br/>should be a shorthand label rather than a UUID. Only lower-case alphanumeric and<br/>dash ("-") characters are permitted. | direct |
| [name](name.md) | 1..1 <br/> [String](String.md) | A recognisable name for the entry. | direct |
| [description](description.md) | 1..1 <br/> [String](String.md) | A human-readable outline of the entry, its format, data content and uses. | direct |
| [subject](subject.md) | 0..* <br/> [String](String.md) | Any keywords, phrases or classification codes that are relevant to the entry,<br/>e.g., particular scientific domains of applicability, or experimental<br/>techniques. | direct |
| [citations](citations.md) | 0..* <br/> [Citation](Citation.md) | A citation or citations for the entry, to be provided should it be used in<br/>academic work (or otherwise). | direct |
| [license](license.md) | 1..1 <br/> [License](License.md) | A URL, URI or SPDX license identifier for a legal document giving official<br/>permission to do something with the resource. | direct |
| [supported_filetypes](supported_filetypes.md) | 1..* <br/> [SupportedFileTypes](SupportedFileTypes.md) | An enumeration of the [`FileType`](FileType.md) that an<br/>[`Extractor`](Extractor.md) supports, matching `FileTypes` present in the<br/>registry. The `FileType:id` can be passed to the `Extractor`, see the<br/>:class:`Usage` class. | direct |
| [supported_output_filetypes](supported_output_filetypes.md) | 0..* <br/> [SupportedFileTypes](SupportedFileTypes.md) | An enumeration of the possible output formats of an :class:`Extractor`. These<br/>should match :class:`FileTypes` present in the registry. They can be specified<br/>on extractor execution using the `{{ output_type }}` parameter in<br/>`usage->command`. If provided in the schema, when a user passes the `{{<br/>output_type }}`, a resource of that type is expected to be found at the<br/>corresponding `{{ output_path }}` (or its default value, if missing). | direct |
| [source_repository](source_repository.md) | 0..1 <br/> [String](String.md) | A URL or URI for a source code repository associated with this extractor. | direct |
| [documentation](documentation.md) | 0..1 <br/> [String](String.md) | A URL or URI for any online documentation associated with this extractor. | direct |
| [usage](usage.md) | 0..* <br/> [Usage](Usage.md) | A machine-actionable description of the usage of the Extractor. The described<br/>usage pattern shall be available after the `installation` instructions have been<br/>followed. | direct |
| [installation](installation.md) | 0..* <br/> [Installation](Installation.md) | A machine-actionable set of installation instructions to obtain a working set-up<br/>of the Extractor. | direct |
| [instructions](instructions.md) | 0..1 <br/> [String](String.md) | Any usage notes or installation instructions for this Extractor. This field is<br/>intended for human use only and is not intended to be machine-actionable. Please<br/>use the `installation` and `usage` fields for that purpose. | direct |









## Identifier and Mapping Information







### Schema Source


* from schema: https://marda-alliance.github.io/metadata_extractors_schema/main/gen-doc/extractor





## Mappings

| Mapping Type | Mapped Value |
| ---  | ---  |
| self | extractor:Extractor |
| native | https://marda-alliance.github.io/metadata_extractors_schema/main/gen-doc/extractor/:Extractor |
| close | schema_org:SoftwareApplication, schema_org:ServiceChannel, dcmitype:Software, dcmitype:Service |


## Examples
### Example: Extractor-example

```yaml
---
id: >-
    example
name: >-
    Example Extractor
description: >-
    An example extractor entry, using all features from the schema.
subject:
    - science
    - engineering
source_repository: >-
    https://github.com/example/extractor
documentation: >-
    https://example.github.io/extractor
usage:
    - method: cli
      command: parse --type={{ input_type }} {{ file_path }}
    - method: cli
      scope: meta-only
      command: parse --type=example --summary {{ file_path }}
    - method: python
      setup: example.extractors
      command: example.extractors.extract({{ file_path }}, type="{{ input_type }}")
    - method: python
      setup: example
      command: >-
          '{{ input_type }}.extractors.extract.ExampleExtractor({{ file_path }}).parse()'
      scope: meta+data
    - method: python
      setup: example
      scope: meta-only
      command: example.extractors.extract.ExampleExtractor({{ file_path }}).summarize()
installation:
    - method: conda
      requirements: >-
          dependencies:
            - python=3.4
            - numpy
            - toolz
            - matplotlib
            - dill
            - pandas
            - partd
            - bokeh
            - pip:
              - git+https://github.com/example/extractor.git#egg=example[all]
    - method: pip
      packages:
          - example-extractor
      requires_python: ==3.4
instructions: >-
    Install the package into a Python 3.4 environment with
    `pip install example-extractor`. After activating the
    environment, the `parse` entrypoint will be available at
    the command-line, and functions can be directly invoked
    from Python code.
citations:
    - title: An example extractor paper using DOI
      uri: doi:10.1000/182
      creators:
          - A. Uthor
          - M. A. Nuscript
      contributors:
          - E. Ditor
      type: article
    - title: Example extractor code repo
      uri: https://github.com/example/extractor
      creators:
          - S. Omeone
          - A. Nother
      contributors:
          - A. Person
      type: software
supported_filetypes:
    - id: example-filetype
      description: >-
          Example Extractor can parse example-filetype once in a blue moon.
      template:
          input_type: example
license:
    uri: https://example.com

```
### Example: Extractor-datatree

```yaml
---
id: >-
    datatree
name: >-
    Datatree is a prototype implementation of a tree-like hierarchical
    data structure for xarray.
description: >-
    Extractor for netCDF files using xarray's Datasets.
subject:
    - data science
source_repository: >-
    https://github.com/xarray-contrib/datatree
documentation: >-
    https://xarray-datatree.readthedocs.io/en/latest/
usage:
    - method: python
      scope: meta+data
      setup: datatree
      command: datatree.open_datatree({{ file_path }})
installation:
    - method: pip
      packages:
          - xarray-datatree==0.0.12
      requires_python: '>=3.9'
instructions: >-
    Install the xarray-datatree package into a Python 3.9+ environment with
    `pip install xarray-datatree`. After importing, netCDF files can be read
    as DataTrees using the 'datatree.open_datatree()' function.
citations:
    - title: Datatree documentation
      uri: https://xarray-datatree.readthedocs.io/en/latest/
      creators:
          - T. Nicholas
      type: software
supported_filetypes:
    - id: netcdf
      description: >-
          Can load netCDF files into Datatree objects.
license:
    spdx: Apache-2.0

```




## LinkML Source

<!-- TODO: investigate https://stackoverflow.com/questions/37606292/how-to-create-tabbed-code-blocks-in-mkdocs-or-sphinx -->

### Direct

<details>

```yaml
name: Extractor
description: A script, code, or web service that, when executed, can extract information
  from a supplied "file" with a specific [`FileType`](FileType.md). The supplied "file"
  may also be a set of files with a given structure. The extracted information may
  be verbatim or transformed, and include the scientific data and/or metadata contained
  within the file.
from_schema: https://marda-alliance.github.io/metadata_extractors_schema/main/gen-doc/extractor
close_mappings:
- schema_org:SoftwareApplication
- schema_org:ServiceChannel
- dcmitype:Software
- dcmitype:Service
slots:
- id
- name
- description
- subject
- citations
- license
attributes:
  supported_filetypes:
    name: supported_filetypes
    description: An enumeration of the [`FileType`](FileType.md) that an [`Extractor`](Extractor.md)
      supports, matching `FileTypes` present in the registry. The `FileType:id` can
      be passed to the `Extractor`, see the :class:`Usage` class.
    from_schema: https://marda-alliance.github.io/metadata_extractors_schema/main/gen-doc/extractor
    rank: 1000
    multivalued: true
    range: SupportedFileTypes
    required: true
  supported_output_filetypes:
    name: supported_output_filetypes
    description: An enumeration of the possible output formats of an :class:`Extractor`.
      These should match :class:`FileTypes` present in the registry. They can be specified
      on extractor execution using the `{{ output_type }}` parameter in `usage->command`.
      If provided in the schema, when a user passes the `{{ output_type }}`, a resource
      of that type is expected to be found at the corresponding `{{ output_path }}`
      (or its default value, if missing).
    from_schema: https://marda-alliance.github.io/metadata_extractors_schema/main/gen-doc/extractor
    rank: 1000
    multivalued: true
    range: SupportedFileTypes
    required: false
  source_repository:
    name: source_repository
    description: A URL or URI for a source code repository associated with this extractor.
    from_schema: https://marda-alliance.github.io/metadata_extractors_schema/main/gen-doc/extractor
    rank: 1000
  documentation:
    name: documentation
    description: A URL or URI for any online documentation associated with this extractor.
    from_schema: https://marda-alliance.github.io/metadata_extractors_schema/main/gen-doc/extractor
    rank: 1000
  usage:
    name: usage
    description: A machine-actionable description of the usage of the Extractor. The
      described usage pattern shall be available after the `installation` instructions
      have been followed.
    examples:
    - value: JsonObj(method='cli', command='parse --type=example {{ file_path }}')
    - value: JsonObj(method='python', setup='example.extractors', command='example.extractors.extract({{
        file_path }}, type="example")')
    from_schema: https://marda-alliance.github.io/metadata_extractors_schema/main/gen-doc/extractor
    rank: 1000
    multivalued: true
    range: Usage
    inlined: true
    inlined_as_list: true
  installation:
    name: installation
    description: A machine-actionable set of installation instructions to obtain a
      working set-up of the Extractor.
    examples:
    - value: JsonObj(method='pip', packages='my-pypi-package==1.0.0', requires_python='>=3.9')
    - value: JsonObj(method='conda', requirements='dependencies:\n  - python=3.10\n  -
        numpy')
    from_schema: https://marda-alliance.github.io/metadata_extractors_schema/main/gen-doc/extractor
    rank: 1000
    multivalued: true
    range: Installation
    inlined: true
    inlined_as_list: true
  instructions:
    name: instructions
    description: Any usage notes or installation instructions for this Extractor.
      This field is intended for human use only and is not intended to be machine-actionable.
      Please use the `installation` and `usage` fields for that purpose.
    from_schema: https://marda-alliance.github.io/metadata_extractors_schema/main/gen-doc/extractor
    rank: 1000
class_uri: extractor:Extractor

```

</details>

### Induced

<details>

```yaml
name: Extractor
description: A script, code, or web service that, when executed, can extract information
  from a supplied "file" with a specific [`FileType`](FileType.md). The supplied "file"
  may also be a set of files with a given structure. The extracted information may
  be verbatim or transformed, and include the scientific data and/or metadata contained
  within the file.
from_schema: https://marda-alliance.github.io/metadata_extractors_schema/main/gen-doc/extractor
close_mappings:
- schema_org:SoftwareApplication
- schema_org:ServiceChannel
- dcmitype:Software
- dcmitype:Service
attributes:
  supported_filetypes:
    name: supported_filetypes
    description: An enumeration of the [`FileType`](FileType.md) that an [`Extractor`](Extractor.md)
      supports, matching `FileTypes` present in the registry. The `FileType:id` can
      be passed to the `Extractor`, see the :class:`Usage` class.
    from_schema: https://marda-alliance.github.io/metadata_extractors_schema/main/gen-doc/extractor
    rank: 1000
    multivalued: true
    alias: supported_filetypes
    owner: Extractor
    domain_of:
    - Extractor
    range: SupportedFileTypes
    required: true
  supported_output_filetypes:
    name: supported_output_filetypes
    description: An enumeration of the possible output formats of an :class:`Extractor`.
      These should match :class:`FileTypes` present in the registry. They can be specified
      on extractor execution using the `{{ output_type }}` parameter in `usage->command`.
      If provided in the schema, when a user passes the `{{ output_type }}`, a resource
      of that type is expected to be found at the corresponding `{{ output_path }}`
      (or its default value, if missing).
    from_schema: https://marda-alliance.github.io/metadata_extractors_schema/main/gen-doc/extractor
    rank: 1000
    multivalued: true
    alias: supported_output_filetypes
    owner: Extractor
    domain_of:
    - Extractor
    range: SupportedFileTypes
    required: false
  source_repository:
    name: source_repository
    description: A URL or URI for a source code repository associated with this extractor.
    from_schema: https://marda-alliance.github.io/metadata_extractors_schema/main/gen-doc/extractor
    rank: 1000
    alias: source_repository
    owner: Extractor
    domain_of:
    - Extractor
    range: string
  documentation:
    name: documentation
    description: A URL or URI for any online documentation associated with this extractor.
    from_schema: https://marda-alliance.github.io/metadata_extractors_schema/main/gen-doc/extractor
    rank: 1000
    alias: documentation
    owner: Extractor
    domain_of:
    - Extractor
    range: string
  usage:
    name: usage
    description: A machine-actionable description of the usage of the Extractor. The
      described usage pattern shall be available after the `installation` instructions
      have been followed.
    examples:
    - value: JsonObj(method='cli', command='parse --type=example {{ file_path }}')
    - value: JsonObj(method='python', setup='example.extractors', command='example.extractors.extract({{
        file_path }}, type="example")')
    from_schema: https://marda-alliance.github.io/metadata_extractors_schema/main/gen-doc/extractor
    rank: 1000
    multivalued: true
    alias: usage
    owner: Extractor
    domain_of:
    - Extractor
    range: Usage
    inlined: true
    inlined_as_list: true
  installation:
    name: installation
    description: A machine-actionable set of installation instructions to obtain a
      working set-up of the Extractor.
    examples:
    - value: JsonObj(method='pip', packages='my-pypi-package==1.0.0', requires_python='>=3.9')
    - value: JsonObj(method='conda', requirements='dependencies:\n  - python=3.10\n  -
        numpy')
    from_schema: https://marda-alliance.github.io/metadata_extractors_schema/main/gen-doc/extractor
    rank: 1000
    multivalued: true
    alias: installation
    owner: Extractor
    domain_of:
    - Extractor
    range: Installation
    inlined: true
    inlined_as_list: true
  instructions:
    name: instructions
    description: Any usage notes or installation instructions for this Extractor.
      This field is intended for human use only and is not intended to be machine-actionable.
      Please use the `installation` and `usage` fields for that purpose.
    from_schema: https://marda-alliance.github.io/metadata_extractors_schema/main/gen-doc/extractor
    rank: 1000
    alias: instructions
    owner: Extractor
    domain_of:
    - Extractor
    range: string
  id:
    name: id
    description: A unique identifier for the entry within the MaRDA registry namespace,
      this should be a shorthand label rather than a UUID. Only lower-case alphanumeric
      and dash ("-") characters are permitted.
    from_schema: https://marda-alliance.github.io/metadata_extractors_schema/main/gen-doc/extractor
    rank: 1000
    slot_uri: schema_org:identifier
    identifier: true
    alias: id
    owner: Extractor
    domain_of:
    - SupportedFileTypes
    - Extractor
    range: string
    required: true
    pattern: ^[a-z]+[a-z,0-9,-]*[a-z,0-9]+$
  name:
    name: name
    description: A recognisable name for the entry.
    from_schema: https://marda-alliance.github.io/metadata_extractors_schema/main/gen-doc/extractor
    rank: 1000
    slot_uri: schema_org:name
    alias: name
    owner: Extractor
    domain_of:
    - Extractor
    range: string
    required: true
  description:
    name: description
    description: A human-readable outline of the entry, its format, data content and
      uses.
    from_schema: https://marda-alliance.github.io/metadata_extractors_schema/main/gen-doc/extractor
    rank: 1000
    slot_uri: schema_org:description
    alias: description
    owner: Extractor
    domain_of:
    - SupportedFileTypes
    - Extractor
    range: string
    required: true
  subject:
    name: subject
    description: Any keywords, phrases or classification codes that are relevant to
      the entry, e.g., particular scientific domains of applicability, or experimental
      techniques.
    from_schema: https://marda-alliance.github.io/metadata_extractors_schema/main/gen-doc/extractor
    rank: 1000
    slot_uri: dc_terms:subject
    multivalued: true
    alias: subject
    owner: Extractor
    domain_of:
    - Extractor
    range: string
  citations:
    name: citations
    description: A citation or citations for the entry, to be provided should it be
      used in academic work (or otherwise).
    from_schema: https://marda-alliance.github.io/metadata_extractors_schema/main/gen-doc/extractor
    rank: 1000
    slot_uri: dcmitype:BibliographicReference
    multivalued: true
    alias: citations
    owner: Extractor
    domain_of:
    - Extractor
    range: Citation
    required: false
  license:
    name: license
    description: A URL, URI or SPDX license identifier for a legal document giving
      official permission to do something with the resource.
    from_schema: https://marda-alliance.github.io/metadata_extractors_schema/main/gen-doc/extractor
    rank: 1000
    slot_uri: dc_terms:license
    alias: license
    owner: Extractor
    domain_of:
    - Extractor
    range: License
    required: true
class_uri: extractor:Extractor

```

</details>