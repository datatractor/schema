# Class: Usage


_A machine-actionable specification of a set of usage instructions of the parent `Extractor`._





URI: [mme_schema:Usage](https://marda-alliance.github.io/metadata_extractors_schema/main/mme_schema/Usage)



```{mermaid}
erDiagram
Usage {
    UsageTypes method  
    string setup  
    string command  
    UsageScope scope  
}



```



<!-- no inheritance hierarchy -->


## Slots

| Name | Cardinality and Range | Description | Inheritance |
| ---  | --- | --- | --- |
| [method](method.md) | 1..1 <br/> [UsageTypes](UsageTypes.md) | Usage invocation method, e.g. from a command line or from Python. | direct |
| [setup](setup.md) | 0..1 <br/> [String](String.md) | Any necessary setup step for the 'command' to become available. | direct |
| [command](command.md) | 1..1 <br/> [String](String.md) | A machine-executable command by which the `Extractor` functionality can be<br/>accessed. | direct |
| [scope](scope.md) | 0..1 <br/> [UsageScope](UsageScope.md) | Specification of extraction scope. | direct |





## Usages

| used by | used in | type | used |
| ---  | --- | --- | --- |
| [Extractor](Extractor.md) | [usage](usage.md) | range | [Usage](Usage.md) |






## Identifier and Mapping Information







### Schema Source


* from schema: https://marda-alliance.github.io/metadata_extractors_schema/main/mme_schema/





## Mappings

| Mapping Type | Mapped Value |
| ---  | ---  |
| self | mme_schema:Usage |
| native | mme_schema:Usage |


## Examples
### Example: Usage-python_setup_scope

```yaml
---
method: python
setup: example
scope: meta-only
command: example.extractors.extract.ExampleExtractor({{ file_path }}).summarize()

```
### Example: Usage-python_templating_scope

```yaml
---
method: python
setup: example
command: >-
    '{{ input_type }}.extractors.extract.ExampleExtractor({{ file_path }}).parse()'
scope: meta+data

```
### Example: Usage-python_setup

```yaml
---
method: python
setup: example.extractors
command: example.extractors.extract({{ file_path }}, type="{{ input_type }}")

```
### Example: Usage-cli_scope

```yaml
---
method: cli
scope: meta-only
command: parse --type=example --summary {{ file_path }}

```
### Example: Usage-cli

```yaml
---
method: cli
command: parse --type={{ input_type }} {{ file_path }}

```




## LinkML Source

<!-- TODO: investigate https://stackoverflow.com/questions/37606292/how-to-create-tabbed-code-blocks-in-mkdocs-or-sphinx -->

### Direct

<details>

```yaml
name: Usage
description: A machine-actionable specification of a set of usage instructions of
  the parent `Extractor`.
from_schema: https://marda-alliance.github.io/metadata_extractors_schema/main/mme_schema/
rank: 1000
attributes:
  method:
    name: method
    description: Usage invocation method, e.g. from a command line or from Python.
    from_schema: https://marda-alliance.github.io/metadata_extractors_schema/main/mme_schema/
    rank: 1000
    range: UsageTypes
    required: true
  setup:
    name: setup
    description: Any necessary setup step for the 'command' to become available.
    comments:
    - 'For `method: python`, this is an argument to Python''s `import`.'
    from_schema: https://marda-alliance.github.io/metadata_extractors_schema/main/mme_schema/
    rank: 1000
  command:
    name: command
    description: A machine-executable command by which the `Extractor` functionality
      can be accessed.
    comments:
    - 'For `method: cli`, a parametrized executable invocation which should be available
      after installing the `Extractor`;'
    - 'For `method: python`, a parametrized function invocation which should be available
      after installing and setting up the `Extractor`.'
    - The templated parameters which can be requested from the user are [described
      by the `UsageTemplate` class](UsageTemplate.md).
    from_schema: https://marda-alliance.github.io/metadata_extractors_schema/main/mme_schema/
    rank: 1000
    required: true
  scope:
    name: scope
    description: Specification of extraction scope.
    from_schema: https://marda-alliance.github.io/metadata_extractors_schema/main/mme_schema/
    rank: 1000
    range: UsageScope
    required: false

```

</details>

### Induced

<details>

```yaml
name: Usage
description: A machine-actionable specification of a set of usage instructions of
  the parent `Extractor`.
from_schema: https://marda-alliance.github.io/metadata_extractors_schema/main/mme_schema/
rank: 1000
attributes:
  method:
    name: method
    description: Usage invocation method, e.g. from a command line or from Python.
    from_schema: https://marda-alliance.github.io/metadata_extractors_schema/main/mme_schema/
    rank: 1000
    alias: method
    owner: Usage
    domain_of:
    - Usage
    - Installation
    range: UsageTypes
    required: true
  setup:
    name: setup
    description: Any necessary setup step for the 'command' to become available.
    comments:
    - 'For `method: python`, this is an argument to Python''s `import`.'
    from_schema: https://marda-alliance.github.io/metadata_extractors_schema/main/mme_schema/
    rank: 1000
    alias: setup
    owner: Usage
    domain_of:
    - Usage
    range: string
  command:
    name: command
    description: A machine-executable command by which the `Extractor` functionality
      can be accessed.
    comments:
    - 'For `method: cli`, a parametrized executable invocation which should be available
      after installing the `Extractor`;'
    - 'For `method: python`, a parametrized function invocation which should be available
      after installing and setting up the `Extractor`.'
    - The templated parameters which can be requested from the user are [described
      by the `UsageTemplate` class](UsageTemplate.md).
    from_schema: https://marda-alliance.github.io/metadata_extractors_schema/main/mme_schema/
    rank: 1000
    alias: command
    owner: Usage
    domain_of:
    - Usage
    range: string
    required: true
  scope:
    name: scope
    description: Specification of extraction scope.
    from_schema: https://marda-alliance.github.io/metadata_extractors_schema/main/mme_schema/
    rank: 1000
    alias: scope
    owner: Usage
    domain_of:
    - Usage
    range: UsageScope
    required: false

```

</details>